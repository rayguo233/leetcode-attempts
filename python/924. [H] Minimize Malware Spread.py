import sys
from typing import List


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        default_ini = min(initial)
        class Node:
            def __init__(self, parent, min_initial=sys.maxsize, total_children=1) -> None:
                self.parent = parent
                self.min_initial = min_initial
                self.total_children = total_children
            
            def __repr__(self) -> str:
                return f'(p: {self.parent}; mi: {self.min_initial}; tc: {self.total_children})'

        def connect_nodes(a: int, b: int, nodes: List[Node]) -> int:
            if a == b: return a
            a, b = min(a, b), max(a, b)
            if nodes[a].parent == a and nodes[b].parent == b:
                nodes[b].parent = a
                if all(node.min_initial != sys.maxsize for node in [nodes[a], nodes[b]]):
                    nodes[a].min_initial = -1
                nodes[a].min_initial = min(nodes[b].min_initial, nodes[a].min_initial)
                nodes[a].total_children = nodes[a].total_children + nodes[b].total_children
                return a
            parent = connect_nodes(nodes[a].parent, nodes[b].parent, nodes)
            nodes[a].parent = parent
            nodes[b].parent = parent
            return parent

        initial = set(initial)
        n = len(graph)
        nodes = [Node(i, min_initial=(i if i in initial else sys.maxsize)) for i in range(n)]
        for i, neighbors in enumerate(graph):
            for j, is_connected in enumerate(neighbors):
                if i >= j or not is_connected: continue
                connect_nodes(i, j, nodes)
        print(nodes)
        nodes = [node for i, node in enumerate(nodes) if node.parent == i and node.min_initial not in [-1, sys.maxsize]] or [Node(default_ini, default_ini)]
        max_tot = max(nodes, key=lambda node: node.total_children).total_children
        nodes = [node for node in nodes if node.total_children == max_tot]
        return min([node.min_initial for node in nodes])

if __name__ == '__main__':
    sol = Solution()